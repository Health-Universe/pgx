# -*- coding: utf-8 -*-
"""streamlit.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1qVJh-h0cNk9JjpilOsCOCa3RkUhFU6Sz
"""

import streamlit as st
import requests

# Define CPIC API URL
recommendation_view_api_url = "https://api.cpicpgx.org/v1/recommendation_view"

def get_recommendations_for_specific_drug(drug):
    # Construct API URL with specified drug name
    url = f"{recommendation_view_api_url}?drugname=eq.{drug}"

    try:
        # Make the API request
        response = requests.get(url)

        # Check if the request was successful (status code 200)
        if response.status_code == 200:
            # Parse and return the JSON data
            return response.json()
        else:
            # Print an error message if the request was not successful
            st.error(f"Error: {response.status_code} - {response.text}")
            return None

    except requests.exceptions.RequestException as e:
        # Print an error message if an exception occurs during the request
        st.error(f"Error: {e}")
        return None

def get_recommendation_for_specific_drug_and_lookup(drug, lookup_keys):
    # Construct API URL with specified drug name and lookup keys
    lookup_keys_str = ",".join([f"{gene}:{phenotype}" for gene, phenotype in lookup_keys.items()])
    url = f"{recommendation_view_api_url}?drugname=eq.{drug}&lookupkey=cs.{{{lookup_keys_str}}}"

    try:
        # Make the API request
        response = requests.get(url)

        # Check if the request was successful (status code 200)
        if response.status_code == 200:
            # Parse and return the JSON data
            return response.json()
        else:
            # Print an error message if the request was not successful
            st.error(f"Error: {response.status_code} - {response.text}")
            return None

    except requests.exceptions.RequestException as e:
        # Print an error message if an exception occurs during the request
        st.error(f"Error: {e}")
        return None

def main():
    st.title("CPIC Recommendations Viewer")

    # User input for drug name
    drug = st.text_input("Enter Drug Name:", value="", key="drug")

    if st.button("Fetch Recommendations"):
        if drug:
            # Call the function to get recommendations for the specified drug
            recommendations = get_recommendations_for_specific_drug(drug)

            # Display the recommendations
            if recommendations:
                st.subheader("Recommendations for " + drug)
                st.json(recommendations)

                # Allow the user to enter lookup keys based on the drug
                st.subheader("Enter Lookup Keys:")
                lookup_keys = {}
                for rec in recommendations:
                    lookup_key = st.text_input(rec["lookupkey"].keys()[0], value="", key=rec["lookupkey"].keys()[0])
                    lookup_keys.update({rec["lookupkey"].keys()[0]: lookup_key})

                # Display the entered lookup keys
                st.subheader("Entered Lookup Keys:")
                st.json(lookup_keys)

                # Fetch and display recommendations based on drug and lookup keys
                recommendations_based_on_lookup = get_recommendation_for_specific_drug_and_lookup(drug, lookup_keys)
                if recommendations_based_on_lookup:
                    st.subheader("Recommendations based on Lookup Keys:")
                    st.json(recommendations_based_on_lookup)
                else:
                    st.error("Failed to retrieve Recommendations based on Lookup Keys.")

            else:
                st.error("Failed to retrieve Recommendations.")
        else:
            st.warning("Please enter a Drug Name.")

if __name__ == "__main__":
    main()