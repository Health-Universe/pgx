# -*- coding: utf-8 -*-
"""streamlit-openai.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1IKhtBhkSDqeb7RP5Fb17f-Nhg6XzvdAB
"""

import streamlit as st
from openai import OpenAI
import requests
import json

# CPIC API URLs
cpic_api_url = "https://api.cpicpgx.org/v1/"
drug_api_url = cpic_api_url + "drug"
guideline_api_url = cpic_api_url + "guideline"
recommendation_view_api_url = cpic_api_url + "recommendation_view"

# Functions for API calls

def get_drug_data(drug):
    url = f"{drug_api_url}?name=eq.{drug}"
    try:
        response = requests.get(url)
        if response.status_code == 200:
            return response.json()
        else:
            st.error(f"Error: {response.status_code} - {response.text}")
            return None
    except requests.exceptions.RequestException as e:
        st.error(f"Error: {e}")
        return None

def get_guideline_for_specific_drug(drug):
    drug_data = get_drug_data(drug)
    guideline_id = get_guidelineid_from_drug(drug_data)
    guideline_data = get_guideline(guideline_id)
    if guideline_data:
        st.write("Retrieved Guideline Data:")
        st.write(guideline_data)
    else:
        st.error("Error retrieving guideline data.")

def get_recommendation_for_specific_drug(drug, gene, phenotype):
    url = f"{recommendation_view_api_url}?drugname=eq.{drug}&lookupkey=cs.{{%22{gene}%22:%20%22{phenotype}%22}}"
    try:
        response = requests.get(url)
        if response.status_code == 200:
            st.write("CPIC Recommendations:")
            st.json(response.json())
        else:
            st.error(f"Error: {response.status_code} - {response.text}")
    except requests.exceptions.RequestException as e:
        st.error(f"Error: {e}")

def get_guidelineid_from_drug(json_data):
    try:
        data_list = json_data
        if data_list and isinstance(data_list, list) and len(data_list) > 0:
            guideline_id = data_list[0].get("guidelineid")
            return guideline_id
        else:
            st.error("Error: Empty or invalid JSON list.")
            return None
    except json.JSONDecodeError as e:
        st.error(f"Error decoding JSON: {e}")
        return None
    except Exception as e:
        st.error(f"Error: {e}")
        return None

def generate_openai_completion(input_json):
    client = OpenAI(api_key=userdata.get('openai'))
    prompt = f"You are a pharmacist that must interpret this JSON object that you just received from a CPIC API: {input_json}, please summarize this information back to the consulting physician. Be sure to include the name of the guideline mentioned in the JSON object and a link to the url in case the physician wants more information"
    try:
        response = client.completions.create(
            model="text-davinci-003",
            prompt=prompt,
            max_tokens=1000
        )
        answer = response.choices[0].text
        st.write(answer)
    except Exception as e:
        st.error(f"Error: {e}")

# Streamlit app
if __name__ == "__main__":
    st.title("CPIC API Explorer")

    # Get user input
    drug = st.selectbox("Select a drug", ['codeine', 'abacavir', 'simvastatin'])
    gene, phenotype = get_lookup_keys_for_query(drug)

    # Display results
    st.subheader("Guideline Data")
    get_guideline_for_specific_drug(drug)

    st.subheader("Recommendations")
    get_recommendation_for_specific_drug(drug, gene, phenotype)

    st.subheader("OpenAI Summary")
    rec = get_recommendation_for_specific_drug(drug, gene, phenotype)
    if rec:
        generate_openai_completion(rec)