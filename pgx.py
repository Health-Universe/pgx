# -*- coding: utf-8 -*-
"""development

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/13H8NLF0wvovjZJRbD8sQVPK8KMl_fjij
"""

import streamlit as st
import requests
import json

# Define static parameters
cpic_api_url = "https://api.cpicpgx.org/v1/"
drug_api_url = cpic_api_url + "drug"
guideline_api_url = cpic_api_url + "guideline"
recommendation_view_api_url = cpic_api_url + "recommendation_view"

# Define functions

def get_guidelineid_from_drug(json_data):
    try:
        data_list = json_data
        guideline_id = data_list[0].get("guidelineid") if data_list and isinstance(data_list, list) and len(data_list) > 0 else None
        return guideline_id
    except json.JSONDecodeError as e:
        st.error(f"Error decoding JSON: {e}")
        return None
    except Exception as e:
        st.error(f"Error: {e}")
        return None

def get_drug_data(drug):
    url = f"{drug_api_url}?name=eq.{drug}"
    try:
        response = requests.get(url)
        if response.status_code == 200:
            return response.json()
        else:
            st.error(f"Error: {response.status_code} - {response.text}")
            return None
    except requests.exceptions.RequestException as e:
        st.error(f"Error: {e}")
        return None

def get_recommendation_for_specific_drug(drug):
    # Construct API URL with specified drug name
    url = f"{recommendation_view_api_url}?drugname=eq.{drug}"

    try:
        # Make the API request
        response = requests.get(url)

        # Check if the request was successful (status code 200)
        if response.status_code == 200:
            # Parse and return the JSON data
            return response.json()
        else:
            # Print an error message if the request was not successful
            st.error(f"Error: {response.status_code} - {response.text}")
            return None

    except requests.exceptions.RequestException as e:
        # Print an error message if an exception occurs during the request
        st.error(f"Error: {e}")
        return None

def get_guideline(guideline_id):
    url = f"{guideline_api_url}?id=eq.{guideline_id}"
    try:
        response = requests.get(url)
        if response.status_code == 200:
            return response.json()
        else:
            st.error(f"Error: {response.status_code} - {response.text}")
            return None
    except requests.exceptions.RequestException as e:
        st.error(f"Error: {e}")
        return None

def get_guideline_for_specific_drug(drug):
    drug_data = get_drug_data(drug)
    guideline_id = get_guidelineid_from_drug(drug_data)
    guideline_data = get_guideline(guideline_id)

    if guideline_data:
        st.subheader("Retrieved Guideline Data:")
        st.json(guideline_data)
    else:
        st.error("Error retrieving guideline data.")

def main():
    st.title("CPIC Recommendation Viewer")

    # User input for drug name
    drug = st.selectbox("Select a drug:", ['codeine', 'abacavir', 'simvastatin'])

    if st.button("Fetch Recommendations"):
        if drug:
            # Call the function to get recommendations data
            recommendations_data = get_recommendation_for_specific_drug(drug)

            # Display the retrieved recommendations data
            if recommendations_data:
                st.subheader("CPIC Recommendations:")
                st.json(recommendations_data)
            else:
                st.warning("No recommendations found.")
        else:
            st.warning("Please enter a drug name.")

if __name__ == "__main__":
    main()